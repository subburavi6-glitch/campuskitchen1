import React, { useEffect, useState } from 'react';
import { motion } from 'framer-motion';
import { 
  Plus, 
  Search, 
  Filter, 
  ClipboardList, 
  Eye, 
  Edit, 
  Trash2, 
  Check, 
  X, 
  Clock, 
  Send,
  Printer,
  Package,
  TrendingUp,
  AlertTriangle,
  CheckCircle
} from 'lucide-react';
import api from '../utils/api';
import { useAuth } from '../contexts/AuthContext';
import Modal from '../components/Modal';
import Drawer from '../components/Drawer';
import IndentForm from '../components/forms/IndentForm';
import { showSuccess, showError, showConfirm, showInfo } from '../utils/sweetAlert';
import Swal from 'sweetalert2';

interface Indent {
  id: string;
  meal: 'BREAKFAST' | 'LUNCH' | 'SNACKS' | 'DINNER';
  status: 'PENDING' | 'APPROVED' | 'PARTIAL' | 'REJECTED' | 'SENT' | 'COMPLETED';
  requestedForDate: string;
  requester: { name: string };
  notes?: string;
  autoGenerated: boolean;
  totalCost: string;
  createdAt: string;
  items: Array<{
    item: {
      id: string;
      name: string;
      unit: string | { id: string; name: string; symbol?: string; active?: boolean; createdAt?: string; updatedAt?: string };
    };
    requestedQty: string;
    approvedQty: string;
    issuedQty: number;
    estimatedCost: string;
  }>;
}

interface IndentStats {
  totalIndents: number;
  approvedIndents: number;
  issuedIndents: number;
  pendingIndents: number;
}

const statusColors = {
  PENDING: 'bg-yellow-100 text-yellow-800',
  APPROVED: 'bg-green-100 text-green-800',
  PARTIAL: 'bg-blue-100 text-blue-800',
  REJECTED: 'bg-red-100 text-red-800',
  SENT: 'bg-purple-100 text-purple-800',
  COMPLETED: 'bg-gray-100 text-gray-800',
};

const mealColors = {
  BREAKFAST: 'bg-orange-100 text-orange-800',
  LUNCH: 'bg-green-100 text-green-800',
  SNACKS: 'bg-purple-100 text-purple-800',
  DINNER: 'bg-blue-100 text-blue-800',
};

const Indents: React.FC = () => {
  const { user } = useAuth();
  const [indents, setIndents] = useState<Indent[]>([]);
  const [stats, setStats] = useState<IndentStats>({
    totalIndents: 0,
    approvedIndents: 0,
    issuedIndents: 0,
    pendingIndents: 0
  });
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('');
  const [mealFilter, setMealFilter] = useState('');
  const [showDrawer, setShowDrawer] = useState(false);
  const [selectedIndent, setSelectedIndent] = useState<Indent | null>(null);
  const [viewIndent, setViewIndent] = useState<Indent | null>(null);
  const [approvalIndent, setApprovalIndent] = useState<Indent | null>(null);
  const [issueIndent, setIssueIndent] = useState<Indent | null>(null);
  const [showAutoIndentModal, setShowAutoIndentModal] = useState(false);

  useEffect(() => {
    fetchIndents();
    fetchStats();
  }, [statusFilter, mealFilter]);

  const fetchIndents = async () => {
    try {
      const params: any = {};
      if (statusFilter) params.status = statusFilter;
      if (mealFilter) params.meal = mealFilter;
      
      const response = await api.get('/indents', { params });
      setIndents(response.data);
    } catch (error) {
      console.error('Failed to fetch indents:', error);
    } finally {
      setLoading(false);
    }
  };

  const fetchStats = async () => {
    try {
      const response = await api.get('/indents/stats');
      setStats(response.data);
    } catch (error) {
      console.error('Failed to fetch stats:', error);
    }
  };

  const handleEdit = (indent: Indent) => {
    // Only allow edit for PENDING status and only for COOK role
    if (indent.status !== 'PENDING' || user?.role !== 'COOK') {
      showError('Access Denied', 'Only pending indents can be edited by cooks');
      return;
    }
    setSelectedIndent(indent);
    setShowDrawer(true);
  };

  const handleDelete = async (indent: Indent) => {
    if (indent.status !== 'PENDING' || user?.role !== 'COOK') {
      showError('Access Denied', 'Only pending indents can be deleted by cooks');
      return;
    }
    
    const result = await showConfirm(
      'Delete Indent',
      'Are you sure you want to delete this indent?'
    );

    if (result.isConfirmed) {
      try {
        await api.delete(`/indents/${indent.id}`);
        showSuccess('Success', 'Indent deleted successfully');
        fetchIndents();
        fetchStats();
      } catch (error) {
        console.error('Failed to delete indent:', error);
      }
    }
  };

  const handleView = (indent: Indent) => {
    setViewIndent(indent);
  };

  const handleApprove = (indent: Indent) => {
    setApprovalIndent(indent);
  };

  const handleReject = async (indent: Indent) => {
    const { value: reason } = await Swal.fire({
      title: 'Reject Indent',
      input: 'textarea',
      inputLabel: 'Reason for rejection',
      inputPlaceholder: 'Enter reason for rejecting this indent...',
      inputAttributes: {
        'aria-label': 'Reason for rejection'
      },
      showCancelButton: true,
      confirmButtonColor: '#1c3c80',
      cancelButtonColor: '#ef4444'
    });

    if (!reason) return;

    try {
      await api.post(`/indents/${indent.id}/reject`, { reason });
      showSuccess('Success', 'Indent rejected successfully');
      fetchIndents();
      fetchStats();
    } catch (error) {
      console.error('Failed to reject indent:', error);
    }
  };

  const handleIssue = (indent: Indent) => {
    setIssueIndent(indent);
  };

  const handleMarkReceived = async (indent: Indent) => {
    const { value: comments } = await Swal.fire({
      title: 'Mark as Received',
      input: 'textarea',
      inputLabel: 'Comments (optional)',
      inputPlaceholder: 'Any comments about the received items...',
      showCancelButton: true,
      confirmButtonColor: '#1c3c80'
    });

    try {
      await api.post(`/indents/${indent.id}/mark-received`, { comments });
      showSuccess('Success', 'Indent marked as received');
      fetchIndents();
      fetchStats();
    } catch (error) {
      console.error('Failed to mark as received:', error);
    }
  };

  const handlePrint = async (indent: Indent) => {
    try {
      const response = await api.get(`/indents/${indent.id}/print`);
      // Open print dialog with formatted content
      const printWindow = window.open('', '_blank');
      if (printWindow) {
        printWindow.document.write(generatePrintHTML(response.data, 'indent'));
        printWindow.document.close();
        printWindow.print();
      }
    } catch (error) {
      console.error('Failed to print indent:', error);
    }
  };

  const handleApprovalSubmit = async (items: any[]) => {
    if (!approvalIndent) return;

    try {
      await api.post(`/indents/${approvalIndent.id}/approve`, { items });
      showSuccess('Success', 'Indent approved successfully');
      setApprovalIndent(null);
      fetchIndents();
      fetchStats();
    } catch (error) {
      console.error('Failed to approve indent:', error);
    }
  };

  const handleIssueSubmit = async (items: any[]) => {
    if (!issueIndent) return;

    try {
      await api.post(`/indents/${issueIndent.id}/issue`, { items });
      showSuccess('Success', 'Items issued successfully');
      setIssueIndent(null);
      fetchIndents();
      fetchStats();
    } catch (error) {
      console.error('Failed to issue items:', error);
    }
  };

  const handleAutoIndent = async (selectedMeals: string[]) => {
    try {
      const response = await api.post('/indents/auto-generate', {
        date: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString().split('T')[0],
        meals: selectedMeals
      });
      showSuccess('Success', `Auto indents generated for ${selectedMeals.length} meals`);
      setShowAutoIndentModal(false);
      fetchIndents();
      fetchStats();
    } catch (error) {
      console.error('Failed to generate auto indent:', error);
      showError('Error', 'Failed to generate auto indent');
    }
  };

  const handleDrawerSuccess = () => {
    setShowDrawer(false);
    setSelectedIndent(null);
    fetchIndents();
    fetchStats();
  };

  const handleDrawerCancel = () => {
    setShowDrawer(false);
    setSelectedIndent(null);
  };

  const filteredIndents = indents.filter(indent =>
    indent.requester.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    indent.meal.toLowerCase().includes(searchTerm.toLowerCase()) ||
    new Date(indent.requestedForDate).toLocaleDateString().includes(searchTerm)
  );

  const canCreate = user?.role === 'COOK' || user?.role === 'CHEF';
  const canApprove = user?.role === 'CHEF' || user?.role === 'ADMIN';
  const canIssue = user?.role === 'STORE';
  const canReceive = user?.role === 'CHEF' || user?.role === 'COOK';

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-bold text-gray-900">Indents Management</h1>
        {canCreate && (
          <div className="flex space-x-2">
            <button
              onClick={() => setShowAutoIndentModal(true)}
              className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg flex items-center space-x-2 transition-colors"
            >
              <Plus size={16} />
              <span>Auto Generate</span>
            </button>
            <button
              onClick={() => setShowDrawer(true)}
              className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center space-x-2 transition-colors"
            >
              <Plus size={16} />
              <span>Manual Indent</span>
            </button>
          </div>
        )}
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="bg-blue-50 rounded-lg p-6"
        >
          <div className="flex items-center">
            <div className="bg-blue-500 p-3 rounded-lg">
              <ClipboardList className="h-6 w-6 text-white" />
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600">Total This Month</p>
              <p className="text-2xl font-bold text-blue-600">{stats.totalIndents}</p>
            </div>
          </div>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.1 }}
          className="bg-green-50 rounded-lg p-6"
        >
          <div className="flex items-center">
            <div className="bg-green-500 p-3 rounded-lg">
              <CheckCircle className="h-6 w-6 text-white" />
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600">Approved</p>
              <p className="text-2xl font-bold text-green-600">{stats.approvedIndents}</p>
            </div>
          </div>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2 }}
          className="bg-purple-50 rounded-lg p-6"
        >
          <div className="flex items-center">
            <div className="bg-purple-500 p-3 rounded-lg">
              <Send className="h-6 w-6 text-white" />
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600">Issued</p>
              <p className="text-2xl font-bold text-purple-600">{stats.issuedIndents}</p>
            </div>
          </div>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.3 }}
          className="bg-yellow-50 rounded-lg p-6"
        >
          <div className="flex items-center">
            <div className="bg-yellow-500 p-3 rounded-lg">
              <Clock className="h-6 w-6 text-white" />
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600">Pending</p>
              <p className="text-2xl font-bold text-yellow-600">{stats.pendingIndents}</p>
            </div>
          </div>
        </motion.div>
      </div>

      {/* Filters */}
      <div className="bg-white rounded-lg shadow p-4">
        <div className="flex flex-col sm:flex-row gap-4">
          <div className="flex-1 relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={16} />
            <input
              type="text"
              placeholder="Search indents..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
          <select
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value)}
            className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          >
            <option value="">All Status</option>
            <option value="PENDING">Pending</option>
            <option value="APPROVED">Approved</option>
            <option value="PARTIAL">Partial</option>
            <option value="REJECTED">Rejected</option>
            <option value="SENT">Sent</option>
            <option value="COMPLETED">Completed</option>
          </select>
          <select
            value={mealFilter}
            onChange={(e) => setMealFilter(e.target.value)}
            className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          >
            <option value="">All Meals</option>
            <option value="BREAKFAST">Breakfast</option>
            <option value="LUNCH">Lunch</option>
            <option value="SNACKS">Snacks</option>
            <option value="DINNER">Dinner</option>
          </select>
        </div>
      </div>

      {/* Indents Table */}
      <div className="bg-white rounded-lg shadow overflow-hidden">
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Indent Details
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Meal & Date
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Items & Cost
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Status
                </th>
                <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Actions
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {filteredIndents.map((indent, index) => (
                <motion.tr
                  key={indent.id}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: index * 0.05 }}
                  className="hover:bg-gray-50"
                >
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="flex items-center">
                      <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center mr-3">
                        <ClipboardList size={20} className="text-blue-600" />
                      </div>
                      <div>
                        <div className="text-sm font-medium text-gray-900">
                          by {indent.requester.name}
                        </div>
                        <div className="text-xs text-gray-500">
                          {new Date(indent.createdAt).toLocaleDateString()}
                        </div>
                        {indent.autoGenerated && (
                          <span className="inline-block px-2 py-1 text-xs font-semibold rounded-full bg-blue-100 text-blue-800 mt-1">
                            AUTO
                          </span>
                        )}
                      </div>
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div>
                      <span className={`inline-block px-2 py-1 text-xs font-semibold rounded-full ${mealColors[indent.meal]} mb-1`}>
                        {indent.meal}
                      </span>
                      <div className="text-sm text-gray-900">
                        {new Date(indent.requestedForDate).toLocaleDateString()}
                      </div>
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div>
                      <div className="text-sm font-medium text-gray-900">
                        {indent.items.length} items
                      </div>
                      <div className="text-sm font-bold text-green-600">
                        ₹{indent.totalCost}
                      </div>
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`inline-block px-2 py-1 text-xs font-semibold rounded-full ${statusColors[indent.status]}`}>
                      {indent.status}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                    <div className="flex items-center justify-end space-x-2">
                      <button
                        onClick={() => handleView(indent)}
                        className="text-blue-600 hover:text-blue-800 p-1 rounded"
                        title="View Details"
                      >
                        <Eye size={16} />
                      </button>
                      <button
                        onClick={() => handlePrint(indent)}
                        className="text-gray-600 hover:text-gray-800 p-1 rounded"
                        title="Print Indent"
                      >
                        <Printer size={16} />
                      </button>
                      
                      {/* Cook Actions */}
                      {user?.role === 'COOK' && indent.status === 'PENDING' && (
                        <button
                          onClick={() => handleEdit(indent)}
                          className="text-green-600 hover:text-green-800 p-1 rounded"
                          title="Edit Indent"
                        >
                          <Edit size={16} />
                        </button>
                      )}
                      
                      {/* Chef Actions */}
                      {canApprove && indent.status === 'PENDING' && (
                        <>
                          <button
                            onClick={() => handleApprove(indent)}
                            className="bg-green-600 hover:bg-green-700 text-white px-2 py-1 rounded text-xs"
                          >
                            Approve
                          </button>
                          <button
                            onClick={() => handleReject(indent)}
                            className="bg-red-600 hover:bg-red-700 text-white px-2 py-1 rounded text-xs"
                          >
                            Reject
                          </button>
                        </>
                      )}
                      
                      {/* Store Actions */}
                      {canIssue && indent.status === 'APPROVED' && (
                        <button
                          onClick={() => handleIssue(indent)}
                          className="bg-purple-600 hover:bg-purple-700 text-white px-2 py-1 rounded text-xs"
                        >
                          Issue
                        </button>
                      )}
                      
                      {/* Receive Actions */}
                      {canReceive && indent.status === 'SENT' && (
                        <button
                          onClick={() => handleMarkReceived(indent)}
                          className="bg-gray-600 hover:bg-gray-700 text-white px-2 py-1 rounded text-xs"
                        >
                          Received
                        </button>
                      )}
                    </div>
                  </td>
                </motion.tr>
              ))}
            </tbody>
          </table>
        </div>

        {filteredIndents.length === 0 && !loading && (
          <div className="text-center py-12">
            <ClipboardList size={48} className="mx-auto text-gray-400 mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">No indents found</h3>
            <p className="text-gray-500 mb-4">
              {searchTerm || statusFilter || mealFilter ? 'Try adjusting your filters' : 'Get started by creating your first indent'}
            </p>
            {canCreate && (
              <button
                onClick={() => setShowDrawer(true)}
                className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg"
              >
                Create Indent
              </button>
            )}
          </div>
        )}
      </div>

      {/* Indent Form Drawer */}
      <Drawer
        isOpen={showDrawer}
        onClose={handleDrawerCancel}
        title={selectedIndent ? 'Edit Indent' : 'Create Indent'}
        size='xl'
      >
        <IndentForm
          indent={selectedIndent}
          onSuccess={handleDrawerSuccess}
          onCancel={handleDrawerCancel}
        />
      </Drawer>

      {/* Auto Indent Generation Modal */}
      <Modal
        isOpen={showAutoIndentModal}
        onClose={() => setShowAutoIndentModal(false)}
        title="Auto Generate Indents"
        size="md"
      >
        <AutoIndentForm
          onGenerate={handleAutoIndent}
          onCancel={() => setShowAutoIndentModal(false)}
        />
      </Modal>

      {/* Approval Modal */}
      <Modal
        isOpen={!!approvalIndent}
        onClose={() => setApprovalIndent(null)}
        title="Approve Indent"
        size="xl"
      >
        {approvalIndent && (
          <ApprovalForm
            indent={approvalIndent}
            onSubmit={handleApprovalSubmit}
            onCancel={() => setApprovalIndent(null)}
          />
        )}
      </Modal>

      {/* Issue Modal */}
      <Modal
        isOpen={!!issueIndent}
        onClose={() => setIssueIndent(null)}
        title="Issue Items"
        size="xl"
      >
        {issueIndent && (
          <IssueForm
            indent={issueIndent}
            onSubmit={handleIssueSubmit}
            onCancel={() => setIssueIndent(null)}
          />
        )}
      </Modal>

      {/* Indent View Modal */}
      <Modal
        isOpen={!!viewIndent}
        onClose={() => setViewIndent(null)}
        title="Indent Details"
        size="xl"
      >
        {viewIndent && (
          <div className="space-y-6">
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-500">Meal</label>
                <span className={`inline-block px-2 py-1 text-xs font-semibold rounded-full ${mealColors[viewIndent.meal]}`}>
                  {viewIndent.meal}
                </span>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-500">Status</label>
                <span className={`inline-block px-2 py-1 text-xs font-semibold rounded-full ${statusColors[viewIndent.status]}`}>
                  {viewIndent.status}
                </span>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-500">Requested By</label>
                <p className="text-lg">{viewIndent.requester.name}</p>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-500">Requested For</label>
                <p className="text-lg">{new Date(viewIndent.requestedForDate).toLocaleDateString()}</p>
              </div>
              <div className="col-span-2">
                <label className="block text-sm font-medium text-gray-500">Total Cost</label>
                <p className="text-2xl font-bold text-green-600">₹{viewIndent.totalCost}</p>
              </div>
            </div>

            {viewIndent.notes && (
              <div>
                <label className="block text-sm font-medium text-gray-500">Notes</label>
                <p className="text-gray-700 bg-gray-50 p-3 rounded-lg">{viewIndent.notes}</p>
              </div>
            )}

            <div>
              <h4 className="font-medium text-gray-900 mb-3">Items Requested</h4>
              <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-gray-50">
                    <tr>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Item</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Requested</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Approved</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Issued</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Cost</th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {viewIndent.items.map((item, index) => (
                      <tr key={index}>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          {item.item.name} {typeof item.item.unit === 'object' ? (item.item.unit.symbol ?? item.item.unit.name ?? '') : item.item.unit}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          {item.requestedQty}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          {item.approvedQty}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          {item.issuedQty}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          ₹{item.estimatedCost}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        )}
      </Modal>
    </div>
  );
};

// Auto Indent Generation Form
const AutoIndentForm: React.FC<{
  onGenerate: (meals: string[]) => void;
  onCancel: () => void;
}> = ({ onGenerate, onCancel }) => {
  const [selectedDate, setSelectedDate] = useState(
    new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString().split('T')[0]
  );
  const [selectedMeals, setSelectedMeals] = useState<string[]>(['LUNCH']);

  const mealOptions = ['BREAKFAST', 'LUNCH', 'SNACKS', 'DINNER'];

  const toggleMeal = (meal: string) => {
    setSelectedMeals(prev => 
      prev.includes(meal) 
        ? prev.filter(m => m !== meal)
        : [...prev, meal]
    );
  };

  return (
    <div className="space-y-6">
      <div className="bg-blue-50 p-4 rounded-lg">
        <h4 className="font-medium text-blue-900 mb-2">Auto Generate Indents</h4>
        <p className="text-sm text-blue-800">
          System will automatically calculate ingredient requirements from all meal plans for selected meals
        </p>
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-2">Date</label>
        <input
          type="date"
          value={selectedDate}
          onChange={(e) => setSelectedDate(e.target.value)}
          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
        />
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-2">Select Meals</label>
        <div className="grid grid-cols-2 gap-2">
          {mealOptions.map(meal => (
            <label key={meal} className="flex items-center space-x-2 cursor-pointer">
              <input
                type="checkbox"
                checked={selectedMeals.includes(meal)}
                onChange={() => toggleMeal(meal)}
                className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
              />
              <span className="text-sm text-gray-700">{meal}</span>
            </label>
          ))}
        </div>
      </div>

      <div className="flex justify-end space-x-3 pt-6 border-t">
        <button
          onClick={onCancel}
          className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50"
        >
          Cancel
        </button>
        <button
          onClick={() => onGenerate(selectedMeals)}
          disabled={selectedMeals.length === 0}
          className="px-4 py-2 text-sm font-medium text-white bg-green-600 border border-transparent rounded-lg hover:bg-green-700 disabled:opacity-50"
        >
          Generate Indents
        </button>
      </div>
    </div>
  );
};

// Approval Form Component
const ApprovalForm: React.FC<{
  indent: Indent;
  onSubmit: (items: any[]) => void;
  onCancel: () => void;
}> = ({ indent, onSubmit, onCancel }) => {
  const [items, setItems] = useState(
    indent.items.map(item => ({
      itemId: item.item.id,
      requestedQty: item.requestedQty,
      approvedQty: item.requestedQty
    }))
  );

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onSubmit(items);
  };

  const updateApprovedQty = (index: number, qty: string) => {
    const newItems = [...items];
    newItems[index].approvedQty = qty;
    setItems(newItems);
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <div className="bg-blue-50 p-4 rounded-lg">
        <h4 className="font-medium text-blue-900">
          Approving {indent.meal} for {new Date(indent.requestedForDate).toLocaleDateString()}
        </h4>
        <p className="text-sm text-blue-700">Requested by: {indent.requester.name}</p>
      </div>

      <div className="space-y-4">
        {indent.items.map((item, index) => (
          <div key={index} className="grid grid-cols-3 gap-4 items-center p-4 bg-gray-50 rounded-lg">
            <div>
              <p className="font-medium text-gray-900">{item.item.name}</p>
              <p className="text-sm text-gray-500">Unit: {typeof item.item.unit === 'object' ? (item.item.unit.symbol ?? item.item.unit.name ?? '') : item.item.unit}</p>
            </div>
            <div>
              <p className="text-sm text-gray-600">Requested: {item.requestedQty}</p>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Approved Quantity
              </label>
              <input
                type="text"
                value={items[index].approvedQty}
                onChange={(e) => updateApprovedQty(index, e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="Enter approved quantity"
              />
            </div>
          </div>
        ))}
      </div>

      <div className="flex justify-end space-x-3 pt-6 border-t">
        <button
          type="button"
          onClick={onCancel}
          className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50"
        >
          Cancel
        </button>
        <button
          type="submit"
          className="px-4 py-2 text-sm font-medium text-white bg-green-600 border border-transparent rounded-lg hover:bg-green-700"
        >
          Approve Indent
        </button>
      </div>
    </form>
  );
};

// Issue Form Component
const IssueForm: React.FC<{
  indent: Indent;
  onSubmit: (items: any[]) => void;
  onCancel: () => void;
}> = ({ indent, onSubmit, onCancel }) => {
  const [items, setItems] = useState(
    indent.items.map(item => ({
      itemId: item.item.id,
      batchId: '',
      qty: parseFloat(item.approvedQty) - item.issuedQty
    }))
  );
  const [availableBatches, setAvailableBatches] = useState<any>({});

  useEffect(() => {
    fetchBatches();
  }, []);

  const fetchBatches = async () => {
    const batchPromises = indent.items.map(async (item) => {
      const response = await api.get(`/items/${item.item.id}/batches`);
      return { itemId: item.item.id, batches: response.data };
    });
    
    const batchResults = await Promise.all(batchPromises);
    const batchMap = batchResults.reduce((acc, result) => {
      acc[result.itemId] = result.batches;
      return acc;
    }, {});
    
    setAvailableBatches(batchMap);
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onSubmit(items);
  };

  const updateItem = (index: number, field: string, value: any) => {
    const newItems = [...items];
    newItems[index] = { ...newItems[index], [field]: value };
    setItems(newItems);
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <div className="bg-purple-50 p-4 rounded-lg">
        <h4 className="font-medium text-purple-900">
          Issuing items for {indent.meal} - {new Date(indent.requestedForDate).toLocaleDateString()}
        </h4>
        <p className="text-sm text-purple-700">Requested by: {indent.requester.name}</p>
      </div>

      <div className="space-y-4">
        {indent.items.map((item, index) => {
          const batches = availableBatches[item.item.id] || [];
          const remainingToIssue = parseFloat(item.approvedQty) - item.issuedQty;
          
          return (
            <div key={index} className="grid grid-cols-4 gap-4 items-end p-4 bg-gray-50 rounded-lg">
              <div>
                <p className="font-medium text-gray-900">{item.item.name}</p>
                <p className="text-sm text-gray-500">
                  Approved: {item.approvedQty}, Issued: {item.issuedQty}
                </p>
                <p className="text-sm text-blue-600">
                  Remaining: {remainingToIssue}
                </p>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Batch</label>
                <select
                  value={items[index].batchId}
                  onChange={(e) => updateItem(index, 'batchId', e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  required
                >
                  <option value="">Select Batch</option>
                  {batches.map((batch: any) => (
                    <option key={batch.id} value={batch.id}>
                      {batch.batchNo} (Available: {batch.qtyOnHand})
                    </option>
                  ))}
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Issue Qty</label>
                <input
                  type="number"
                  step="0.01"
                  max={remainingToIssue}
                  value={items[index].qty}
                  onChange={(e) => updateItem(index, 'qty', parseFloat(e.target.value))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  required
                />
              </div>
              <div>
                <p className="text-sm text-gray-600">
                  Max: {remainingToIssue}
                </p>
              </div>
            </div>
          );
        })}
      </div>

      <div className="flex justify-end space-x-3 pt-6 border-t">
        <button
          type="button"
          onClick={onCancel}
          className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50"
        >
          Cancel
        </button>
        <button
          type="submit"
          className="px-4 py-2 text-sm font-medium text-white bg-purple-600 border border-transparent rounded-lg hover:bg-purple-700"
        >
          Issue Items
        </button>
      </div>
    </form>
  );
};

// Print HTML Generator
const generatePrintHTML = (data: any, type: 'indent' | 'po' | 'grn') => {
  const currentDate = new Date().toLocaleDateString();
  
  if (type === 'indent') {
    return `
      <!DOCTYPE html>
      <html>
      <head>
        <title>Indent - ${data.meal}</title>
        <style>
          body { font-family: Arial, sans-serif; margin: 20px; }
          .header { text-align: center; margin-bottom: 30px; border-bottom: 2px solid #1c3c80; padding-bottom: 20px; }
          .logo { font-size: 24px; font-weight: bold; color: #1c3c80; }
          .details { margin: 20px 0; }
          .table { width: 100%; border-collapse: collapse; margin: 20px 0; }
          .table th, .table td { border: 1px solid #ddd; padding: 8px; text-align: left; }
          .table th { background-color: #f5f5f5; }
          .footer { margin-top: 50px; }
          .signature { margin-top: 40px; }
        </style>
      </head>
      <body>
        <div class="header">
          <div class="logo">FOOD SERVICE MANAGEMENT</div>
          <h2>INDENT REQUEST</h2>
        </div>
        
        <div class="details">
          <p><strong>Meal:</strong> ${data.meal}</p>
          <p><strong>Requested For:</strong> ${new Date(data.requestedForDate).toLocaleDateString()}</p>
          <p><strong>Requested By:</strong> ${data.requester.name}</p>
          <p><strong>Date:</strong> ${currentDate}</p>
          <p><strong>Status:</strong> ${data.status}</p>
          <p><strong>Total Cost:</strong> ₹${data.totalCost}</p>
        </div>

        <table class="table">
          <thead>
            <tr>
              <th>Item Name</th>
              <th>Unit</th>
              <th>Requested Qty</th>
              <th>Approved Qty</th>
              <th>Estimated Cost</th>
            </tr>
          </thead>
          <tbody>
            ${data.items.map((item: any) => `
              <tr>
                <td>${item.item.name}</td>
                <td>${typeof item.item.unit === 'object' ? (item.item.unit.symbol ?? item.item.unit.name ?? '') : item.item.unit}</td>
                <td>${item.requestedQty}</td>
                <td>${item.approvedQty}</td>
                <td>₹${item.estimatedCost}</td>
              </tr>
            `).join('')}
          </tbody>
        </table>

        <div class="footer">
          <div class="signature">
            <p>Authorized By: _________________________</p>
            <p>Date: _________________________</p>
            <p>Signature: _________________________</p>
          </div>
        </div>
      </body>
      </html>
    `;
  }
  
  return '';
};

export default Indents;