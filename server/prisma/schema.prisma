// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String     @id @default(uuid())
  name           String
  email          String     @unique
  phone          String?
  passwordHash   String     @map("password_hash")
  role           UserRole
  status         UserStatus @default(ACTIVE)
  messFacilityId String?    @map("mess_facility_id")
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @updatedAt @map("updated_at")

  // Relations
  purchaseOrders PurchaseOrder[]
  grns           GRN[]
  indents        Indent[]
  issues         Issue[]
  auditLogs      AuditLog[]
  stockLedger    StockLedger[]
  studentPhotos  StudentPhoto[]  @relation("StudentPhotoUploader")
  csvUploads     CsvUpload[]
  scannerLogs    ScannerLog[]
  messFacility   MessFacility?   @relation(fields: [messFacilityId], references: [id])

  @@map("users")
}

// =====================================
// Mess App Mobile Tables
// =====================================

model Student {
  id             String   @id @default(uuid())
  registerNumber String   @unique @map("register_number")
  name           String
  mobileNumber   String?  @map("mobile_number")
  email          String?
  roomNumber     String?  @map("room_number")
  qrCode         String   @unique @map("qr_code")
  userType       UserType @default(STUDENT) @map("user_type")
  employeeId     String?  @map("employee_id")
  department     String?
  photoUrl       String?  @map("photo_url")
  isHosteler     Boolean  @default(false) @map("is_hosteler")
  hostelId       String?  @map("hostel_id")
  messName       String?  @map("mess_name")
  mobileLoginEnabled Boolean @default(true) @map("mobile_login_enabled")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  attendances    MealAttendance[]
  ratings        MealRating[]
  notifications  Notification[]
  subscriptions  Subscription[]
  pushTokens     PushToken[]
  ratingRequests RatingRequest[]
  studentPhotos  StudentPhoto[]
  scannerLogs    ScannerLog[]
  orders         Order[]
  hostel         Hostel?  @relation(fields: [hostelId], references: [id])
  attendanceReminders MealAttendanceReminder[]

  @@map("students")
}

model StudentPhoto {
  id         String   @id @default(uuid())
  studentId  String   @map("student_id")
  photoUrl   String   @map("photo_url")
  uploadedBy String?  @map("uploaded_by")
  isPrimary  Boolean  @default(true) @map("is_primary")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relations
  student  Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  uploader User?   @relation(fields: [uploadedBy], references: [id], name: "StudentPhotoUploader")

  @@map("student_photos")
}

model MessFacility {
  id        String   @id @default(uuid())
  name      String
  location  String?
  capacity  Int      @default(0)
  imageUrl  String?  @map("image_url")
  active    Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  packages      Package[]
  subscriptions Subscription[]
  mealPlans     MealPlan[]
  menuItems     MenuItem[]
  orders        Order[]
  users         User[]

  @@map("mess_facilities")
}

model Package {
  id             String     @id @default(uuid())
  name           String
  description    String?
  messFacilityId String     @map("mess_facility_id")
  durationDays   Int        @map("duration_days")
  price          Decimal    @db.Decimal(10, 2)
  mealsIncluded  MealType[] @map("meals_included")
  active         Boolean    @default(true)
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @updatedAt @map("updated_at")

  // Relations
  messFacility  MessFacility   @relation(fields: [messFacilityId], references: [id], onDelete: Cascade)
  subscriptions Subscription[]
  hostels       PackageHostel[]

  @@map("packages")
}

model Subscription {
  id                String             @id @default(uuid())
  studentId         String             @map("student_id")
  packageId         String             @map("package_id")
  messFacilityId    String             @map("mess_facility_id")
  startDate         DateTime           @map("start_date") @db.Date
  endDate           DateTime           @map("end_date") @db.Date
  status            SubscriptionStatus @default(ACTIVE)
  amountPaid        Decimal            @map("amount_paid") @db.Decimal(10, 2)
  razorpayOrderId   String?            @map("razorpay_order_id")
  razorpayPaymentId String?            @map("razorpay_payment_id")
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")

  // Relations
  student      Student                   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  package      Package                   @relation(fields: [packageId], references: [id], onDelete: Cascade)
  messFacility MessFacility              @relation(fields: [messFacilityId], references: [id], onDelete: Cascade)
  transactions SubscriptionTransaction[]

  @@map("subscriptions")
}

model SubscriptionTransaction {
  id                String            @id @default(uuid())
  subscriptionId    String            @map("subscription_id")
  razorpayOrderId   String            @map("razorpay_order_id")
  razorpayPaymentId String?           @map("razorpay_payment_id")
  amount            Decimal           @db.Decimal(10, 2)
  currency          String            @default("INR")
  status            TransactionStatus @default(PENDING)
  webhookData       Json?             @map("webhook_data")
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")

  // Relations
  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@map("subscription_transactions")
}

model PushToken {
  id        String   @id @default(uuid())
  studentId String   @map("student_id")
  token     String
  platform  String
  active    Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, token])
  @@map("push_tokens")
}

model RatingRequest {
  id                 String   @id @default(uuid())
  studentId          String   @map("student_id")
  mealPlanId         String   @map("meal_plan_id")
  notificationSentAt DateTime @map("notification_sent_at")
  ratingSubmitted    Boolean  @default(false) @map("rating_submitted")
  createdAt          DateTime @default(now()) @map("created_at")

  // Relations
  student  Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  mealPlan MealPlan @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)

  @@unique([studentId, mealPlanId])
  @@map("rating_requests")
}

model MealPlan {
  id              String   @id @default(uuid())
  messFacilityId  String   @map("mess_facility_id")
  day             Int
  meal            MealType
  plannedStudents Int      @map("planned_students")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  // Relations
  messFacility   MessFacility     @relation(fields: [messFacilityId], references: [id], onDelete: Cascade)
  dishes         MealPlanDish[]
  attendances    MealAttendance[]
  ratings        MealRating[]
  ratingRequests RatingRequest[]
  notifications  Notification[]   // ADDED: New relation for notifications
  
  @@unique([messFacilityId, day, meal])
  @@map("meal_plans")
}


model MealPlanDish {
  id            String  @id @default(uuid())
  mealPlanId    String  @map("meal_plan_id")
  dishId        String  @map("dish_id")
  sequenceOrder Int     @default(1) @map("sequence_order")
  isMainDish    Boolean @default(false) @map("is_main_dish")

  // Relations
  mealPlan MealPlan @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)
  dish     Dish     @relation(fields: [dishId], references: [id], onDelete: Cascade)

  @@unique([mealPlanId, dishId])
  @@map("meal_plan_dishes")
}

model MealAttendance {
  id              String    @id @default(uuid())
  studentId       String    @map("student_id")
  mealPlanId      String    @map("meal_plan_id")
  attended        Boolean   @default(false)
  willAttend      Boolean   @default(true)
  attendedAt      DateTime? @map("attended_at")
  markedAt        DateTime? @map("marked_at")
  isMandatoryMarked Boolean @default(false) @map("is_mandatory_marked")
  scannerVerified Boolean   @default(false) @map("scanner_verified")
  scannerDeviceId String?   @map("scanner_device_id")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  student  Student  @relation(fields: [studentId], references: [id], onDelete